def main():
    global cnt
    cnt+=1
    t = int(time.time())
    # t=1542934800
    timeArray = time.localtime(t)
    otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)
    print('Epoch:   %s\tTime:   %s' % (str(cnt),otherStyleTime))
    users = {}
    expenses = {}
    total_expenses = 0

    # 0. get all distinct users group by token, and total expenses
    users,total_expenses=get_users_and_total_expenses(t, 3600*3)
    print('0. users and total expenses calculated successfully')

    # 1. calculate the link to be distributed to the single person
    users=calculate_link_to_be_distributed_to_single_person(users,total_expenses)
    print('1. link distribution calculation successfully')

    # 2. activate accounts
    builder = BUILDER.Builder(secret=constant.SEED, network=constant.API_SERVER)
    sql='select private_key, public_key from private_keys where is_activated=0'
    all_accounts=[]
    rows=my_pgmanager.select(sql)
    for row in rows:
        private_key=row[0]
        public_key=row[1]
        all_accounts.append((private_key, public_key))

    # inquire blockchain to determine which public keys are to be #####activated#####
    accounts_to_be_activated=get_inactive_accounts(all_accounts, instance='public')
    # activate all the accounts by using multi ops
    if len(accounts_to_be_activated)!=0:
        try:
            sqls=[]
            iterations=int(len(accounts_to_be_activated)/100)
            for i in range(0,iterations+1):
                builder= BUILDER.Builder(secret=constant.SEED, network=constant.API_SERVER)
                accounts=accounts_to_be_activated[i*100:i*100+100]
                for account in accounts:
                    builder.append_create_account_op(destination=account, starting_balance=constant.FOTONO_STARTING_BALANCE)
                    sqls.append({'public_key': account})
                builder.sign()
                res=builder.submit()
                if dict(res).__contains__('hash'):
                    my_pgmanager.execute_many('update private_keys set is_activated=1 where public_key=%(public_key)s',
                                              sqls)
                time.sleep(10)
                print('accounts calculation successfully')
            # the following codes are correct:
            # for account in accounts_to_be_activated:
            #     builder.append_create_account_op(destination=account, starting_balance=constant.FOTONO_STARTING_BALANCE)
            #     sqls.append({'public_key': account})
            # builder.sign()
            # res=builder.submit()
            # if dict(res).__contains__('hash'):
            #     my_pgmanager.execute_many('update private_keys set is_activated=1 where public_key=%(public_key)s',
            #                               sqls)
        except Exception as e:
            print('Accounts creation failed\n' + e.message)
    else:
        pass

    # inquire the blockchain to determine if the account has trusted LINK issued by LINK issuer:
    sql = 'select private_key, public_key from private_keys where is_activated=1 and has_trusted=0'
    sqls=[]
    all_accounts = []
    rows = my_pgmanager.select(sql)
    for row in rows:
        private_key = row[0]
        public_key = row[1]
        all_accounts.append((private_key, public_key))
    accounts_to_do_trusting=get_untrusting_accounts(all_accounts,constant)
    # create trust using multi-threading:
    if len(accounts_to_do_trusting)!=0:
        import threading
        threads=[]
        for account in accounts_to_do_trusting:
            private_key=account[0]
            sqls.append({'public_key': account[1]})
            client=CLIENT.Client(private_key,api_server=constant.API_SERVER)
            thread = threading.Thread(target=client.trust, args=(constant.ISSUER_ADDRESS, 'LINK'))
            threads.append(thread)
        for thread in threads:
            thread.start()
        for thread in threads:
            thread.join()
        print('trusting successfully')
        # my_pgmanager.execute_many('update private_keys set has_trusted=1 where public_key=%(public_key)s', sqls)
    else:
        pass

    # distribute link
    builder = BUILDER.Builder(secret=constant.DISTRIBUTOR_SEED, network=constant.API_SERVER)
    if len(users)!=0:
        iterations = int(len(users) / 100)
        # for i in range(0,iterations):
        #     for ii in range(0,100):
        #         pass
        list_users=list(users)
        for i in range(0,iterations+1):

            list_users_to_be_sent = list_users[i * 100:i * 100 + 100]
            builder = BUILDER.Builder(secret=constant.DISTRIBUTOR_SEED, network=constant.API_SERVER)
            for k in list_users_to_be_sent:
                user=users[k]
                builder.append_payment_op(destination=user.address, amount=user.link, asset_type='LINK',
                                          asset_issuer=constant.ISSUER_ADDRESS)
            builder.add_text_memo(str(time.time()))
            builder.sign()

        # for k in users:
        #     user = users[k]
        #     builder.append_payment_op(destination=user.address, amount=user.link, asset_type='LINK', asset_issuer=constant.ISSUER_ADDRESS)
        # # add a memo, which specifies the timestamp when the latest order is submitted
        # builder.add_text_memo(str(time.time()))
        # builder.sign()
            res=builder.submit()
            # time.sleep(20)
            if res.__contains__('hash'):
                sqls=[]
                items=[]
                for k in list_users_to_be_sent:
                    user = users[k]
                    sqls.append({'is_filled': 1, 'user_token': user.token})
                    item = {
                        "UserToken": user.token,
                        "LinkAddress": user.address,
                        "LinkAmount": user.link
                    }
                    items.append(item)
                sql='update orders set is_filled=%(is_filled)s where usertoken=%(user_token)s and created_at<' + str(t) + ' and is_filled=0'
                my_pgmanager.execute_many(sql, sqls)

                try:
                    # respond to server end
                    # url='http://19o60w6992.51mypc.cn/sunday/link/callback'
                    url='http://weixin.jrlyl.com/sunday/link/callback'
                    # items=json.dumps(items)
                    # data=json.dumps({'LinkResult1':items})
                    data={'LinkResult':json.dumps(items)}
                    res0=requests.post(url,data)
                    print('link distribution successfully')
                except Exception as e:
                    print(e)
    else:
        pass
    print('\n')
    print('\n')
    print('\n')
